### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AccountCreateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  create: [AccountCreateWithoutUserInput!]
}

input AccountCreateWithoutUserInput {
  accessToken: String!
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
}

input AccountFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountScalarWhereInput {
  accessToken: StringFilter
  accessTokenExpires: NullableDateTimeFilter
  AND: [AccountScalarWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: NullableStringFilter
  userId: StringFilter
}

input AccountUpdateManyDataInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String
  providerId: String
  providerType: String
  refreshToken: String
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  create: [AccountCreateWithoutUserInput!]
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereNestedInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateManyWithWhereNestedInput {
  data: AccountUpdateManyDataInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateWithoutUserDataInput {
  accessToken: String
  accessTokenExpires: DateTime
  createdAt: DateTime
  id: String
  providerAccountId: String
  providerId: String
  providerType: String
  refreshToken: String
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserDataInput!
  where: AccountWhereUniqueInput!
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserDataInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  accessToken: StringFilter
  accessTokenExpires: NullableDateTimeFilter
  AND: [AccountWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: NullableStringFilter
  user: UserWhereInput
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  providerAccountId: String
}

type Category {
  createdAt: DateTime!
  id: String!
  name: String!
  owner: User!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: TagOrderByInput): [Tag!]!
  todos(after: TodoWhereUniqueInput, before: TodoWhereUniqueInput, first: Int, last: Int, orderBy: TodoOrderByInput, where: TodoWhereInput): [Todo!]!
}

input CategoryCreateInput {
  createdAt: DateTime
  id: String
  name: String!
  owner: UserCreateOneWithoutCategoriesInput!
  tags: TagCreateManyWithoutCategoriesInput
  todos: TodoCreateManyWithoutCategoryInput
}

input CategoryCreateManyWithoutOwnerInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutOwnerInput!]
}

input CategoryCreateManyWithoutTagsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutTagsInput!]
}

input CategoryCreateOneWithoutTodosInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutTodosInput
}

input CategoryCreateWithoutOwnerInput {
  createdAt: DateTime
  id: String
  name: String!
  tags: TagCreateManyWithoutCategoriesInput
  todos: TodoCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutTagsInput {
  createdAt: DateTime
  id: String
  name: String!
  owner: UserCreateOneWithoutCategoriesInput!
  todos: TodoCreateManyWithoutCategoryInput
}

input CategoryCreateWithoutTodosInput {
  createdAt: DateTime
  id: String
  name: String!
  owner: UserCreateOneWithoutCategoriesInput!
  tags: TagCreateManyWithoutCategoriesInput
}

input CategoryFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  ownerId: StringFilter
  tags: TagFilter
  todos: TodoFilter
}

input CategoryUpdateInput {
  createdAt: DateTime
  id: String
  name: String
  owner: UserUpdateOneRequiredWithoutCategoriesInput
  tags: TagUpdateManyWithoutCategoriesInput
  todos: TodoUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyDataInput {
  createdAt: DateTime
  id: String
  name: String
}

input CategoryUpdateManyWithoutOwnerInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutOwnerInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CategoryUpdateManyWithoutTagsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutTagsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutTagsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateOneRequiredWithoutTodosInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutTodosInput
  update: CategoryUpdateWithoutTodosDataInput
  upsert: CategoryUpsertWithoutTodosInput
}

input CategoryUpdateWithoutOwnerDataInput {
  createdAt: DateTime
  id: String
  name: String
  tags: TagUpdateManyWithoutCategoriesInput
  todos: TodoUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutTagsDataInput {
  createdAt: DateTime
  id: String
  name: String
  owner: UserUpdateOneRequiredWithoutCategoriesInput
  todos: TodoUpdateManyWithoutCategoryInput
}

input CategoryUpdateWithoutTodosDataInput {
  createdAt: DateTime
  id: String
  name: String
  owner: UserUpdateOneRequiredWithoutCategoriesInput
  tags: TagUpdateManyWithoutCategoriesInput
}

input CategoryUpdateWithWhereUniqueWithoutOwnerInput {
  data: CategoryUpdateWithoutOwnerDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithWhereUniqueWithoutTagsInput {
  data: CategoryUpdateWithoutTagsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithoutTodosInput {
  create: CategoryCreateWithoutTodosInput!
  update: CategoryUpdateWithoutTodosDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutOwnerInput {
  create: CategoryCreateWithoutOwnerInput!
  update: CategoryUpdateWithoutOwnerDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutTagsInput {
  create: CategoryCreateWithoutTagsInput!
  update: CategoryUpdateWithoutTagsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  createdAt: DateTimeFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  owner: UserWhereInput
  ownerId: StringFilter
  tags: TagFilter
  todos: TodoFilter
}

input CategoryWhereUniqueInput {
  id: String
}

enum Color {
  BLUE
  DEFAULT
  GREEN
  PURPLE
  RED
  YELLOW
}

"""Use JavaScript Date object for date/time fields."""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DeleteTodoInput {
  id: ID!
}

input DeleteTodosByIdInput {
  ids: [ID!]!
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneTag(data: TagCreateInput!): Tag!
  createOneTodo(data: TodoCreateInput!): Todo!
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneTag(where: TagWhereUniqueInput!): Tag
  deleteTodo(data: DeleteTodoInput!): Todo
  deleteTodosById(data: DeleteTodosByIdInput!): [ID!]
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateTodo(data: UpdateTodoInput!): Todo
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  categories: [Category!]
  category(id: ID!): Category
  me: User
  tag(id: ID!): Tag
  tags: [Tag!]
  todos: [Todo!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  color: Color!
  createdAt: DateTime!
  id: String!
  name: String!
  owner: User!
  todos(after: TodoWhereUniqueInput, before: TodoWhereUniqueInput, first: Int, last: Int): [Todo!]!
}

input TagCreateInput {
  categories: CategoryCreateManyWithoutTagsInput
  color: Color
  createdAt: DateTime
  id: String
  name: String!
  owner: UserCreateOneWithoutTagsInput!
  todos: TodoCreateManyWithoutTagsInput
}

input TagCreateManyWithoutCategoriesInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutCategoriesInput!]
}

input TagCreateManyWithoutOwnerInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutOwnerInput!]
}

input TagCreateManyWithoutTodosInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutTodosInput!]
}

input TagCreateWithoutCategoriesInput {
  color: Color
  createdAt: DateTime
  id: String
  name: String!
  owner: UserCreateOneWithoutTagsInput!
  todos: TodoCreateManyWithoutTagsInput
}

input TagCreateWithoutOwnerInput {
  categories: CategoryCreateManyWithoutTagsInput
  color: Color
  createdAt: DateTime
  id: String
  name: String!
  todos: TodoCreateManyWithoutTagsInput
}

input TagCreateWithoutTodosInput {
  categories: CategoryCreateManyWithoutTagsInput
  color: Color
  createdAt: DateTime
  id: String
  name: String!
  owner: UserCreateOneWithoutTagsInput!
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  color: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  ownerId: OrderByArg
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  categories: CategoryFilter
  color: Color
  createdAt: DateTimeFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  ownerId: StringFilter
  todos: TodoFilter
}

input TagUpdateInput {
  categories: CategoryUpdateManyWithoutTagsInput
  color: Color
  createdAt: DateTime
  id: String
  name: String
  owner: UserUpdateOneRequiredWithoutTagsInput
  todos: TodoUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  color: Color
  createdAt: DateTime
  id: String
  name: String
}

input TagUpdateManyWithoutCategoriesInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutCategoriesInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input TagUpdateManyWithoutOwnerInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutOwnerInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutOwnerInput!]
}

input TagUpdateManyWithoutTodosInput {
  connect: [TagWhereUniqueInput!]
  create: [TagCreateWithoutTodosInput!]
  delete: [TagWhereUniqueInput!]
  deleteMany: [TagScalarWhereInput!]
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutTodosInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutTodosInput!]
}

input TagUpdateManyWithWhereNestedInput {
  data: TagUpdateManyDataInput!
  where: TagScalarWhereInput!
}

input TagUpdateWithoutCategoriesDataInput {
  color: Color
  createdAt: DateTime
  id: String
  name: String
  owner: UserUpdateOneRequiredWithoutTagsInput
  todos: TodoUpdateManyWithoutTagsInput
}

input TagUpdateWithoutOwnerDataInput {
  categories: CategoryUpdateManyWithoutTagsInput
  color: Color
  createdAt: DateTime
  id: String
  name: String
  todos: TodoUpdateManyWithoutTagsInput
}

input TagUpdateWithoutTodosDataInput {
  categories: CategoryUpdateManyWithoutTagsInput
  color: Color
  createdAt: DateTime
  id: String
  name: String
  owner: UserUpdateOneRequiredWithoutTagsInput
}

input TagUpdateWithWhereUniqueWithoutCategoriesInput {
  data: TagUpdateWithoutCategoriesDataInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutOwnerInput {
  data: TagUpdateWithoutOwnerDataInput!
  where: TagWhereUniqueInput!
}

input TagUpdateWithWhereUniqueWithoutTodosInput {
  data: TagUpdateWithoutTodosDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutCategoriesInput {
  create: TagCreateWithoutCategoriesInput!
  update: TagUpdateWithoutCategoriesDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutOwnerInput {
  create: TagCreateWithoutOwnerInput!
  update: TagUpdateWithoutOwnerDataInput!
  where: TagWhereUniqueInput!
}

input TagUpsertWithWhereUniqueWithoutTodosInput {
  create: TagCreateWithoutTodosInput!
  update: TagUpdateWithoutTodosDataInput!
  where: TagWhereUniqueInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  categories: CategoryFilter
  color: Color
  createdAt: DateTimeFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  owner: UserWhereInput
  ownerId: StringFilter
  todos: TodoFilter
}

input TagWhereUniqueInput {
  id: String
}

type Todo {
  archivedAt: DateTime
  category: Category!
  categoryId: String!
  createdAt: DateTime!
  id: String!
  owner: User!
  ownerId: String!
  status: TodoStatus!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: TagOrderByInput): [Tag!]!
  text: String!
}

input TodoCreateInput {
  archivedAt: DateTime
  category: CategoryCreateOneWithoutTodosInput!
  createdAt: DateTime
  id: String
  owner: UserCreateOneWithoutTodosInput!
  status: TodoStatus
  tags: TagCreateManyWithoutTodosInput
  text: String!
}

input TodoCreateManyWithoutCategoryInput {
  connect: [TodoWhereUniqueInput!]
  create: [TodoCreateWithoutCategoryInput!]
}

input TodoCreateManyWithoutOwnerInput {
  connect: [TodoWhereUniqueInput!]
  create: [TodoCreateWithoutOwnerInput!]
}

input TodoCreateManyWithoutTagsInput {
  connect: [TodoWhereUniqueInput!]
  create: [TodoCreateWithoutTagsInput!]
}

input TodoCreateWithoutCategoryInput {
  archivedAt: DateTime
  createdAt: DateTime
  id: String
  owner: UserCreateOneWithoutTodosInput!
  status: TodoStatus
  tags: TagCreateManyWithoutTodosInput
  text: String!
}

input TodoCreateWithoutOwnerInput {
  archivedAt: DateTime
  category: CategoryCreateOneWithoutTodosInput!
  createdAt: DateTime
  id: String
  status: TodoStatus
  tags: TagCreateManyWithoutTodosInput
  text: String!
}

input TodoCreateWithoutTagsInput {
  archivedAt: DateTime
  category: CategoryCreateOneWithoutTodosInput!
  createdAt: DateTime
  id: String
  owner: UserCreateOneWithoutTodosInput!
  status: TodoStatus
  text: String!
}

input TodoFilter {
  every: TodoWhereInput
  none: TodoWhereInput
  some: TodoWhereInput
}

input TodoOrderByInput {
  archivedAt: OrderByArg
  categoryId: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  ownerId: OrderByArg
  status: OrderByArg
  text: OrderByArg
}

input TodoScalarWhereInput {
  AND: [TodoScalarWhereInput!]
  archivedAt: NullableDateTimeFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [TodoScalarWhereInput!]
  OR: [TodoScalarWhereInput!]
  ownerId: StringFilter
  status: TodoStatus
  tags: TagFilter
  text: StringFilter
}

enum TodoStatus {
  DONE
  IN_PROGRESS
  TODO
  WAITING
}

input TodoUpdateManyDataInput {
  archivedAt: DateTime
  createdAt: DateTime
  id: String
  status: TodoStatus
  text: String
}

input TodoUpdateManyWithoutCategoryInput {
  connect: [TodoWhereUniqueInput!]
  create: [TodoCreateWithoutCategoryInput!]
  delete: [TodoWhereUniqueInput!]
  deleteMany: [TodoScalarWhereInput!]
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TodoUpdateManyWithWhereNestedInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TodoUpdateManyWithoutOwnerInput {
  connect: [TodoWhereUniqueInput!]
  create: [TodoCreateWithoutOwnerInput!]
  delete: [TodoWhereUniqueInput!]
  deleteMany: [TodoScalarWhereInput!]
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [TodoUpdateManyWithWhereNestedInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutOwnerInput!]
}

input TodoUpdateManyWithoutTagsInput {
  connect: [TodoWhereUniqueInput!]
  create: [TodoCreateWithoutTagsInput!]
  delete: [TodoWhereUniqueInput!]
  deleteMany: [TodoScalarWhereInput!]
  disconnect: [TodoWhereUniqueInput!]
  set: [TodoWhereUniqueInput!]
  update: [TodoUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [TodoUpdateManyWithWhereNestedInput!]
  upsert: [TodoUpsertWithWhereUniqueWithoutTagsInput!]
}

input TodoUpdateManyWithWhereNestedInput {
  data: TodoUpdateManyDataInput!
  where: TodoScalarWhereInput!
}

input TodoUpdateWithoutCategoryDataInput {
  archivedAt: DateTime
  createdAt: DateTime
  id: String
  owner: UserUpdateOneRequiredWithoutTodosInput
  status: TodoStatus
  tags: TagUpdateManyWithoutTodosInput
  text: String
}

input TodoUpdateWithoutOwnerDataInput {
  archivedAt: DateTime
  category: CategoryUpdateOneRequiredWithoutTodosInput
  createdAt: DateTime
  id: String
  status: TodoStatus
  tags: TagUpdateManyWithoutTodosInput
  text: String
}

input TodoUpdateWithoutTagsDataInput {
  archivedAt: DateTime
  category: CategoryUpdateOneRequiredWithoutTodosInput
  createdAt: DateTime
  id: String
  owner: UserUpdateOneRequiredWithoutTodosInput
  status: TodoStatus
  text: String
}

input TodoUpdateWithWhereUniqueWithoutCategoryInput {
  data: TodoUpdateWithoutCategoryDataInput!
  where: TodoWhereUniqueInput!
}

input TodoUpdateWithWhereUniqueWithoutOwnerInput {
  data: TodoUpdateWithoutOwnerDataInput!
  where: TodoWhereUniqueInput!
}

input TodoUpdateWithWhereUniqueWithoutTagsInput {
  data: TodoUpdateWithoutTagsDataInput!
  where: TodoWhereUniqueInput!
}

input TodoUpsertWithWhereUniqueWithoutCategoryInput {
  create: TodoCreateWithoutCategoryInput!
  update: TodoUpdateWithoutCategoryDataInput!
  where: TodoWhereUniqueInput!
}

input TodoUpsertWithWhereUniqueWithoutOwnerInput {
  create: TodoCreateWithoutOwnerInput!
  update: TodoUpdateWithoutOwnerDataInput!
  where: TodoWhereUniqueInput!
}

input TodoUpsertWithWhereUniqueWithoutTagsInput {
  create: TodoCreateWithoutTagsInput!
  update: TodoUpdateWithoutTagsDataInput!
  where: TodoWhereUniqueInput!
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  archivedAt: NullableDateTimeFilter
  category: CategoryWhereInput
  categoryId: StringFilter
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  owner: UserWhereInput
  ownerId: StringFilter
  status: TodoStatus
  tags: TagFilter
  text: StringFilter
}

input TodoWhereUniqueInput {
  id: String
}

input UpdateTodoInput {
  archivedAt: DateTime
  id: ID!
  status: TodoStatus
  tags: [ID!]
  text: String
}

type User {
  avatarUrl: String
  email: String!
  id: String!
  name: String
  todos(after: TodoWhereUniqueInput, before: TodoWhereUniqueInput, first: Int, last: Int): [Todo!]!
}

input UserCreateOneWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCategoriesInput
}

input UserCreateOneWithoutTagsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTagsInput
}

input UserCreateOneWithoutTodosInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTodosInput
}

input UserCreateWithoutCategoriesInput {
  accounts: AccountCreateManyWithoutUserInput
  avatarUrl: String
  createdAt: DateTime
  email: String!
  id: String
  name: String
  tags: TagCreateManyWithoutOwnerInput
  todos: TodoCreateManyWithoutOwnerInput
}

input UserCreateWithoutTagsInput {
  accounts: AccountCreateManyWithoutUserInput
  avatarUrl: String
  categories: CategoryCreateManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  id: String
  name: String
  todos: TodoCreateManyWithoutOwnerInput
}

input UserCreateWithoutTodosInput {
  accounts: AccountCreateManyWithoutUserInput
  avatarUrl: String
  categories: CategoryCreateManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  id: String
  name: String
  tags: TagCreateManyWithoutOwnerInput
}

input UserUpdateOneRequiredWithoutCategoriesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCategoriesInput
  update: UserUpdateWithoutCategoriesDataInput
  upsert: UserUpsertWithoutCategoriesInput
}

input UserUpdateOneRequiredWithoutTagsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTagsInput
  update: UserUpdateWithoutTagsDataInput
  upsert: UserUpsertWithoutTagsInput
}

input UserUpdateOneRequiredWithoutTodosInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutTodosInput
  update: UserUpdateWithoutTodosDataInput
  upsert: UserUpsertWithoutTodosInput
}

input UserUpdateWithoutCategoriesDataInput {
  accounts: AccountUpdateManyWithoutUserInput
  avatarUrl: String
  createdAt: DateTime
  email: String
  id: String
  name: String
  tags: TagUpdateManyWithoutOwnerInput
  todos: TodoUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTagsDataInput {
  accounts: AccountUpdateManyWithoutUserInput
  avatarUrl: String
  categories: CategoryUpdateManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  id: String
  name: String
  todos: TodoUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutTodosDataInput {
  accounts: AccountUpdateManyWithoutUserInput
  avatarUrl: String
  categories: CategoryUpdateManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  id: String
  name: String
  tags: TagUpdateManyWithoutOwnerInput
}

input UserUpsertWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput!
  update: UserUpdateWithoutCategoriesDataInput!
}

input UserUpsertWithoutTagsInput {
  create: UserCreateWithoutTagsInput!
  update: UserUpdateWithoutTagsDataInput!
}

input UserUpsertWithoutTodosInput {
  create: UserCreateWithoutTodosInput!
  update: UserUpdateWithoutTodosDataInput!
}

input UserWhereInput {
  accounts: AccountFilter
  AND: [UserWhereInput!]
  avatarUrl: NullableStringFilter
  categories: CategoryFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: UUIDFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  tags: TagFilter
  todos: TodoFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
